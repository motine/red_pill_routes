# frozen_string_literal: true

# A value object for a part of a route.
# Please see section in README.md.
class Stretch < Struct.new(:route_id, :start_node, :end_node, :metadata)
  class << self
    # Takes a list of stretches an orders them so that they connect with each other.
    #
    #
    # Limitation:
    # The stretches must have exactly one possibility to connect them.
    # If this should not hold true anymore, we would need to implement something a shortest path algorithm
    # This method will throw an exception if there is more than one possibility or if there is no node to start with.
    #
    # Example (route_ids are omitted for better readability):
    # stretches = [Stretch.new('b', 'c'), Stretch.new('a', 'b'), Stretch.new('c', 'd')]
    # Stretch.order(stretches)
    # => [#Stretch<('a', 'b')>, #Stretch<('b', 'c')>, #Stretch<('c', 'd')>]
    def order(stretches)
      edges = Stretch.graph_edges_from(stretches)
      start_node = Stretch.start_node_from_edges(edges)

      result = []
      loop do
        stretch = stretches.find { |s| s.start_node == start_node }
        break unless stretch # there is no more stretch, so we must be at the end

        result << stretch
        start_node = stretch.end_node
      end
      result
    end

    protected # this protected has only informational value

    # Creates a hash of the form { start_node => end_node }.
    def graph_edges_from(stretches)
      stretches.each_with_object({}) do |stretch, acc|
        raise "there is more than one possibility to connect: #{edges.inspect}" if acc[stretch.start_node]

        acc[stretch.start_node] = stretch.end_node
      end
    end

    # Takes a edges hash (e.g. generated by #graph_edges_from) and finds the node which has no incoming connection.
    def start_node_from_edges(edges)
      start_nodes = edges.keys.keep_if do |node|
        edges.none? { |_start_node, end_node| end_node == node }
      end
      raise "there is no possible start point while ordering stretches: #{edges.inspect}" if start_nodes.empty?

      start_nodes.first
    end
  end
end
